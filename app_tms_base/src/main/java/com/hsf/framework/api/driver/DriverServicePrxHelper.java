// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `driver.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.hsf.framework.api.driver;

/**
 * Provides type-specific helper functions.
 **/
public final class DriverServicePrxHelper extends Ice.ObjectPrxHelperBase implements DriverServicePrx
{
    private static final String __driverChangePw_name = "driverChangePw";

    public int driverChangePw(String phone, String opw, String npw)
    {
        return driverChangePw(phone, opw, npw, null, false);
    }

    public int driverChangePw(String phone, String opw, String npw, java.util.Map<String, String> __ctx)
    {
        return driverChangePw(phone, opw, npw, __ctx, true);
    }

    private int driverChangePw(String phone, String opw, String npw, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverChangePw_name);
        return end_driverChangePw(begin_driverChangePw(phone, opw, npw, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, String opw, String npw)
    {
        return begin_driverChangePw(phone, opw, npw, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, String opw, String npw, java.util.Map<String, String> __ctx)
    {
        return begin_driverChangePw(phone, opw, npw, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, String opw, String npw, Ice.Callback __cb)
    {
        return begin_driverChangePw(phone, opw, npw, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, String opw, String npw, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverChangePw(phone, opw, npw, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, String opw, String npw, Callback_DriverService_driverChangePw __cb)
    {
        return begin_driverChangePw(phone, opw, npw, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, String opw, String npw, java.util.Map<String, String> __ctx, Callback_DriverService_driverChangePw __cb)
    {
        return begin_driverChangePw(phone, opw, npw, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, 
                                                String opw, 
                                                String npw, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverChangePw(phone, opw, npw, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, 
                                                String opw, 
                                                String npw, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverChangePw(phone, opw, npw, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, 
                                                String opw, 
                                                String npw, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverChangePw(phone, opw, npw, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverChangePw(String phone, 
                                                String opw, 
                                                String npw, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverChangePw(phone, opw, npw, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverChangePw(String phone, 
                                                 String opw, 
                                                 String npw, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_IntCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverChangePw(phone, opw, npw, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                DriverServicePrxHelper.__driverChangePw_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_driverChangePw(String phone, 
                                                 String opw, 
                                                 String npw, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverChangePw_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverChangePw_name, __cb);
        try
        {
            __result.prepare(__driverChangePw_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(phone);
            __os.writeString(opw);
            __os.writeString(npw);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_driverChangePw(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverChangePw_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverChangePw_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_driverChangePw(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverLogin_name = "driverLogin";

    public DriverBase driverLogin(String phone, String pw)
    {
        return driverLogin(phone, pw, null, false);
    }

    public DriverBase driverLogin(String phone, String pw, java.util.Map<String, String> __ctx)
    {
        return driverLogin(phone, pw, __ctx, true);
    }

    private DriverBase driverLogin(String phone, String pw, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverLogin_name);
        return end_driverLogin(begin_driverLogin(phone, pw, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverLogin(String phone, String pw)
    {
        return begin_driverLogin(phone, pw, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, String pw, java.util.Map<String, String> __ctx)
    {
        return begin_driverLogin(phone, pw, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, String pw, Ice.Callback __cb)
    {
        return begin_driverLogin(phone, pw, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, String pw, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverLogin(phone, pw, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, String pw, Callback_DriverService_driverLogin __cb)
    {
        return begin_driverLogin(phone, pw, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, String pw, java.util.Map<String, String> __ctx, Callback_DriverService_driverLogin __cb)
    {
        return begin_driverLogin(phone, pw, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, 
                                             String pw, 
                                             IceInternal.Functional_GenericCallback1<DriverBase> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverLogin(phone, pw, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, 
                                             String pw, 
                                             IceInternal.Functional_GenericCallback1<DriverBase> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverLogin(phone, pw, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, 
                                             String pw, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<DriverBase> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverLogin(phone, pw, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverLogin(String phone, 
                                             String pw, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<DriverBase> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverLogin(phone, pw, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverLogin(String phone, 
                                              String pw, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<DriverBase> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverLogin(phone, pw, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<com.hsf.framework.api.driver.DriverBase>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             DriverServicePrxHelper.__driverLogin_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_driverLogin(String phone, 
                                              String pw, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverLogin_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverLogin_name, __cb);
        try
        {
            __result.prepare(__driverLogin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(phone);
            __os.writeString(pw);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DriverBase end_driverLogin(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverLogin_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DriverBase __ret = null;
            __ret = DriverBase.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverLogin_completed(Ice.TwowayCallbackArg1<DriverBase> __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        DriverBase __ret = null;
        try
        {
            __ret = __proxy.end_driverLogin(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverOrderStateOp_name = "driverOrderStateOp";

    public boolean driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state)
    {
        return driverOrderStateOp(userid, enterpriseid, orderNo, state, null, false);
    }

    public boolean driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state, java.util.Map<String, String> __ctx)
    {
        return driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, true);
    }

    private boolean driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverOrderStateOp_name);
        return end_driverOrderStateOp(begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state, java.util.Map<String, String> __ctx)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state, Ice.Callback __cb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state, Callback_DriverService_driverOrderStateOp __cb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, int enterpriseid, long orderNo, int state, java.util.Map<String, String> __ctx, Callback_DriverService_driverOrderStateOp __cb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, 
                                                    int enterpriseid, 
                                                    long orderNo, 
                                                    int state, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, 
                                                    int enterpriseid, 
                                                    long orderNo, 
                                                    int state, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, 
                                                    int enterpriseid, 
                                                    long orderNo, 
                                                    int state, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverOrderStateOp(int userid, 
                                                    int enterpriseid, 
                                                    long orderNo, 
                                                    int state, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverOrderStateOp(int userid, 
                                                     int enterpriseid, 
                                                     long orderNo, 
                                                     int state, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_BoolCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverOrderStateOp(userid, enterpriseid, orderNo, state, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    DriverServicePrxHelper.__driverOrderStateOp_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_driverOrderStateOp(int userid, 
                                                     int enterpriseid, 
                                                     long orderNo, 
                                                     int state, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverOrderStateOp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverOrderStateOp_name, __cb);
        try
        {
            __result.prepare(__driverOrderStateOp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(userid);
            __os.writeInt(enterpriseid);
            __os.writeLong(orderNo);
            __os.writeInt(state);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_driverOrderStateOp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverOrderStateOp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverOrderStateOp_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_driverOrderStateOp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverQueryCompList_name = "driverQueryCompList";

    public DriverCompInfo[] driverQueryCompList(int userid)
    {
        return driverQueryCompList(userid, null, false);
    }

    public DriverCompInfo[] driverQueryCompList(int userid, java.util.Map<String, String> __ctx)
    {
        return driverQueryCompList(userid, __ctx, true);
    }

    private DriverCompInfo[] driverQueryCompList(int userid, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverQueryCompList_name);
        return end_driverQueryCompList(begin_driverQueryCompList(userid, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid)
    {
        return begin_driverQueryCompList(userid, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, java.util.Map<String, String> __ctx)
    {
        return begin_driverQueryCompList(userid, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, Ice.Callback __cb)
    {
        return begin_driverQueryCompList(userid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverQueryCompList(userid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, Callback_DriverService_driverQueryCompList __cb)
    {
        return begin_driverQueryCompList(userid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, java.util.Map<String, String> __ctx, Callback_DriverService_driverQueryCompList __cb)
    {
        return begin_driverQueryCompList(userid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, 
                                                     IceInternal.Functional_GenericCallback1<DriverCompInfo[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryCompList(userid, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, 
                                                     IceInternal.Functional_GenericCallback1<DriverCompInfo[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryCompList(userid, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<DriverCompInfo[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryCompList(userid, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryCompList(int userid, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<DriverCompInfo[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryCompList(userid, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverQueryCompList(int userid, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_GenericCallback1<DriverCompInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryCompList(userid, __ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackArg1<com.hsf.framework.api.driver.DriverCompInfo[]>(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     DriverServicePrxHelper.__driverQueryCompList_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_driverQueryCompList(int userid, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverQueryCompList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverQueryCompList_name, __cb);
        try
        {
            __result.prepare(__driverQueryCompList_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(userid);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DriverCompInfo[] end_driverQueryCompList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverQueryCompList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DriverCompInfo[] __ret;
            __ret = DriverCompInfoSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverQueryCompList_completed(Ice.TwowayCallbackArg1<DriverCompInfo[]> __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        DriverCompInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_driverQueryCompList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverQueryOrderInfo_name = "driverQueryOrderInfo";

    public OrderComplex driverQueryOrderInfo(int userid, int enterpriseid, long orderNo)
    {
        return driverQueryOrderInfo(userid, enterpriseid, orderNo, null, false);
    }

    public OrderComplex driverQueryOrderInfo(int userid, int enterpriseid, long orderNo, java.util.Map<String, String> __ctx)
    {
        return driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, true);
    }

    private OrderComplex driverQueryOrderInfo(int userid, int enterpriseid, long orderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverQueryOrderInfo_name);
        return end_driverQueryOrderInfo(begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, int enterpriseid, long orderNo)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, int enterpriseid, long orderNo, java.util.Map<String, String> __ctx)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, int enterpriseid, long orderNo, Ice.Callback __cb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, int enterpriseid, long orderNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, int enterpriseid, long orderNo, Callback_DriverService_driverQueryOrderInfo __cb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, int enterpriseid, long orderNo, java.util.Map<String, String> __ctx, Callback_DriverService_driverQueryOrderInfo __cb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, 
                                                      int enterpriseid, 
                                                      long orderNo, 
                                                      IceInternal.Functional_GenericCallback1<OrderComplex> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, 
                                                      int enterpriseid, 
                                                      long orderNo, 
                                                      IceInternal.Functional_GenericCallback1<OrderComplex> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, 
                                                      int enterpriseid, 
                                                      long orderNo, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<OrderComplex> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderInfo(int userid, 
                                                      int enterpriseid, 
                                                      long orderNo, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<OrderComplex> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverQueryOrderInfo(int userid, 
                                                       int enterpriseid, 
                                                       long orderNo, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<OrderComplex> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderInfo(userid, enterpriseid, orderNo, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<com.hsf.framework.api.driver.OrderComplex>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      DriverServicePrxHelper.__driverQueryOrderInfo_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_driverQueryOrderInfo(int userid, 
                                                       int enterpriseid, 
                                                       long orderNo, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverQueryOrderInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverQueryOrderInfo_name, __cb);
        try
        {
            __result.prepare(__driverQueryOrderInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(userid);
            __os.writeInt(enterpriseid);
            __os.writeLong(orderNo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public OrderComplex end_driverQueryOrderInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverQueryOrderInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            OrderComplex __ret = null;
            __ret = OrderComplex.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverQueryOrderInfo_completed(Ice.TwowayCallbackArg1<OrderComplex> __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        OrderComplex __ret = null;
        try
        {
            __ret = __proxy.end_driverQueryOrderInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverQueryOrderList_name = "driverQueryOrderList";

    public OrderInfo[] driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range)
    {
        return driverQueryOrderList(userid, enterpriseid, state, year, index, range, null, false);
    }

    public OrderInfo[] driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range, java.util.Map<String, String> __ctx)
    {
        return driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, true);
    }

    private OrderInfo[] driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverQueryOrderList_name);
        return end_driverQueryOrderList(begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range, java.util.Map<String, String> __ctx)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range, Ice.Callback __cb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range, Callback_DriverService_driverQueryOrderList __cb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, int enterpriseid, int state, int year, int index, int range, java.util.Map<String, String> __ctx, Callback_DriverService_driverQueryOrderList __cb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, 
                                                      int enterpriseid, 
                                                      int state, 
                                                      int year, 
                                                      int index, 
                                                      int range, 
                                                      IceInternal.Functional_GenericCallback1<OrderInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, 
                                                      int enterpriseid, 
                                                      int state, 
                                                      int year, 
                                                      int index, 
                                                      int range, 
                                                      IceInternal.Functional_GenericCallback1<OrderInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, 
                                                      int enterpriseid, 
                                                      int state, 
                                                      int year, 
                                                      int index, 
                                                      int range, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<OrderInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderList(int userid, 
                                                      int enterpriseid, 
                                                      int state, 
                                                      int year, 
                                                      int index, 
                                                      int range, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<OrderInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverQueryOrderList(int userid, 
                                                       int enterpriseid, 
                                                       int state, 
                                                       int year, 
                                                       int index, 
                                                       int range, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<OrderInfo[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderList(userid, enterpriseid, state, year, index, range, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1<com.hsf.framework.api.driver.OrderInfo[]>(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      DriverServicePrxHelper.__driverQueryOrderList_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_driverQueryOrderList(int userid, 
                                                       int enterpriseid, 
                                                       int state, 
                                                       int year, 
                                                       int index, 
                                                       int range, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverQueryOrderList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverQueryOrderList_name, __cb);
        try
        {
            __result.prepare(__driverQueryOrderList_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(userid);
            __os.writeInt(enterpriseid);
            __os.writeInt(state);
            __os.writeInt(year);
            __os.writeInt(index);
            __os.writeInt(range);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public OrderInfo[] end_driverQueryOrderList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverQueryOrderList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            OrderInfo[] __ret;
            __ret = OrderInfoSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverQueryOrderList_completed(Ice.TwowayCallbackArg1<OrderInfo[]> __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        OrderInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_driverQueryOrderList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverQueryOrderState_name = "driverQueryOrderState";

    public int driverQueryOrderState(int enterpriseid, long orderNo)
    {
        return driverQueryOrderState(enterpriseid, orderNo, null, false);
    }

    public int driverQueryOrderState(int enterpriseid, long orderNo, java.util.Map<String, String> __ctx)
    {
        return driverQueryOrderState(enterpriseid, orderNo, __ctx, true);
    }

    private int driverQueryOrderState(int enterpriseid, long orderNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverQueryOrderState_name);
        return end_driverQueryOrderState(begin_driverQueryOrderState(enterpriseid, orderNo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, long orderNo)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, long orderNo, java.util.Map<String, String> __ctx)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, long orderNo, Ice.Callback __cb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, long orderNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, long orderNo, Callback_DriverService_driverQueryOrderState __cb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, long orderNo, java.util.Map<String, String> __ctx, Callback_DriverService_driverQueryOrderState __cb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, 
                                                       long orderNo, 
                                                       IceInternal.Functional_IntCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, 
                                                       long orderNo, 
                                                       IceInternal.Functional_IntCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, 
                                                       long orderNo, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_IntCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, 
                                                       long orderNo, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_IntCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, 
                                                        long orderNo, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_IntCallback __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverQueryOrderState(enterpriseid, orderNo, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       DriverServicePrxHelper.__driverQueryOrderState_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_driverQueryOrderState(int enterpriseid, 
                                                        long orderNo, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverQueryOrderState_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverQueryOrderState_name, __cb);
        try
        {
            __result.prepare(__driverQueryOrderState_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(enterpriseid);
            __os.writeLong(orderNo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_driverQueryOrderState(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverQueryOrderState_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverQueryOrderState_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_driverQueryOrderState(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverSureOrderFee_name = "driverSureOrderFee";

    public boolean driverSureOrderFee(int enterpriseid, long orderNo, double fee)
    {
        return driverSureOrderFee(enterpriseid, orderNo, fee, null, false);
    }

    public boolean driverSureOrderFee(int enterpriseid, long orderNo, double fee, java.util.Map<String, String> __ctx)
    {
        return driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, true);
    }

    private boolean driverSureOrderFee(int enterpriseid, long orderNo, double fee, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverSureOrderFee_name);
        return end_driverSureOrderFee(begin_driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, long orderNo, double fee)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, long orderNo, double fee, java.util.Map<String, String> __ctx)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, long orderNo, double fee, Ice.Callback __cb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, long orderNo, double fee, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, long orderNo, double fee, Callback_DriverService_driverSureOrderFee __cb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, long orderNo, double fee, java.util.Map<String, String> __ctx, Callback_DriverService_driverSureOrderFee __cb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, 
                                                    long orderNo, 
                                                    double fee, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, 
                                                    long orderNo, 
                                                    double fee, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, 
                                                    long orderNo, 
                                                    double fee, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, 
                                                    long orderNo, 
                                                    double fee, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, 
                                                     long orderNo, 
                                                     double fee, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_BoolCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverSureOrderFee(enterpriseid, orderNo, fee, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    DriverServicePrxHelper.__driverSureOrderFee_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_driverSureOrderFee(int enterpriseid, 
                                                     long orderNo, 
                                                     double fee, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverSureOrderFee_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverSureOrderFee_name, __cb);
        try
        {
            __result.prepare(__driverSureOrderFee_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(enterpriseid);
            __os.writeLong(orderNo);
            __os.writeDouble(fee);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_driverSureOrderFee(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverSureOrderFee_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverSureOrderFee_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_driverSureOrderFee(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverUploadCorrect_name = "driverUploadCorrect";

    public int driverUploadCorrect(int userid, int enterpriseid, long orderid, String json)
    {
        return driverUploadCorrect(userid, enterpriseid, orderid, json, null, false);
    }

    public int driverUploadCorrect(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx)
    {
        return driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, true);
    }

    private int driverUploadCorrect(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverUploadCorrect_name);
        return end_driverUploadCorrect(begin_driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, int enterpriseid, long orderid, String json)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, int enterpriseid, long orderid, String json, Ice.Callback __cb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, int enterpriseid, long orderid, String json, Callback_DriverService_driverUploadCorrect __cb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx, Callback_DriverService_driverUploadCorrect __cb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, 
                                                     int enterpriseid, 
                                                     long orderid, 
                                                     String json, 
                                                     IceInternal.Functional_IntCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, 
                                                     int enterpriseid, 
                                                     long orderid, 
                                                     String json, 
                                                     IceInternal.Functional_IntCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, 
                                                     int enterpriseid, 
                                                     long orderid, 
                                                     String json, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_IntCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverUploadCorrect(int userid, 
                                                     int enterpriseid, 
                                                     long orderid, 
                                                     String json, 
                                                     java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_IntCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverUploadCorrect(int userid, 
                                                      int enterpriseid, 
                                                      long orderid, 
                                                      String json, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_IntCallback __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadCorrect(userid, enterpriseid, orderid, json, __ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     DriverServicePrxHelper.__driverUploadCorrect_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_driverUploadCorrect(int userid, 
                                                      int enterpriseid, 
                                                      long orderid, 
                                                      String json, 
                                                      java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverUploadCorrect_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverUploadCorrect_name, __cb);
        try
        {
            __result.prepare(__driverUploadCorrect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(userid);
            __os.writeInt(enterpriseid);
            __os.writeLong(orderid);
            __os.writeString(json);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_driverUploadCorrect(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverUploadCorrect_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverUploadCorrect_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_driverUploadCorrect(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverUploadNode_name = "driverUploadNode";

    public int driverUploadNode(int userid, int enterpriseid, long orderid, String node)
    {
        return driverUploadNode(userid, enterpriseid, orderid, node, null, false);
    }

    public int driverUploadNode(int userid, int enterpriseid, long orderid, String node, java.util.Map<String, String> __ctx)
    {
        return driverUploadNode(userid, enterpriseid, orderid, node, __ctx, true);
    }

    private int driverUploadNode(int userid, int enterpriseid, long orderid, String node, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverUploadNode_name);
        return end_driverUploadNode(begin_driverUploadNode(userid, enterpriseid, orderid, node, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, int enterpriseid, long orderid, String node)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, int enterpriseid, long orderid, String node, java.util.Map<String, String> __ctx)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, int enterpriseid, long orderid, String node, Ice.Callback __cb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, int enterpriseid, long orderid, String node, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, int enterpriseid, long orderid, String node, Callback_DriverService_driverUploadNode __cb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, int enterpriseid, long orderid, String node, java.util.Map<String, String> __ctx, Callback_DriverService_driverUploadNode __cb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, 
                                                  int enterpriseid, 
                                                  long orderid, 
                                                  String node, 
                                                  IceInternal.Functional_IntCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, 
                                                  int enterpriseid, 
                                                  long orderid, 
                                                  String node, 
                                                  IceInternal.Functional_IntCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, 
                                                  int enterpriseid, 
                                                  long orderid, 
                                                  String node, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_IntCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverUploadNode(int userid, 
                                                  int enterpriseid, 
                                                  long orderid, 
                                                  String node, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_IntCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverUploadNode(int userid, 
                                                   int enterpriseid, 
                                                   long orderid, 
                                                   String node, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_IntCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadNode(userid, enterpriseid, orderid, node, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  DriverServicePrxHelper.__driverUploadNode_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_driverUploadNode(int userid, 
                                                   int enterpriseid, 
                                                   long orderid, 
                                                   String node, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverUploadNode_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverUploadNode_name, __cb);
        try
        {
            __result.prepare(__driverUploadNode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(userid);
            __os.writeInt(enterpriseid);
            __os.writeLong(orderid);
            __os.writeString(node);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_driverUploadNode(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverUploadNode_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverUploadNode_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_driverUploadNode(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __driverUploadOriginal_name = "driverUploadOriginal";

    public int driverUploadOriginal(int userid, int enterpriseid, long orderid, String json)
    {
        return driverUploadOriginal(userid, enterpriseid, orderid, json, null, false);
    }

    public int driverUploadOriginal(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx)
    {
        return driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, true);
    }

    private int driverUploadOriginal(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__driverUploadOriginal_name);
        return end_driverUploadOriginal(begin_driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, int enterpriseid, long orderid, String json)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, null, false, false, null);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, int enterpriseid, long orderid, String json, Ice.Callback __cb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, int enterpriseid, long orderid, String json, Callback_DriverService_driverUploadOriginal __cb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, int enterpriseid, long orderid, String json, java.util.Map<String, String> __ctx, Callback_DriverService_driverUploadOriginal __cb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, 
                                                      int enterpriseid, 
                                                      long orderid, 
                                                      String json, 
                                                      IceInternal.Functional_IntCallback __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, 
                                                      int enterpriseid, 
                                                      long orderid, 
                                                      String json, 
                                                      IceInternal.Functional_IntCallback __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, 
                                                      int enterpriseid, 
                                                      long orderid, 
                                                      String json, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_IntCallback __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_driverUploadOriginal(int userid, 
                                                      int enterpriseid, 
                                                      long orderid, 
                                                      String json, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_IntCallback __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_driverUploadOriginal(int userid, 
                                                       int enterpriseid, 
                                                       long orderid, 
                                                       String json, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_IntCallback __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_driverUploadOriginal(userid, enterpriseid, orderid, json, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      DriverServicePrxHelper.__driverUploadOriginal_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_driverUploadOriginal(int userid, 
                                                       int enterpriseid, 
                                                       long orderid, 
                                                       String json, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__driverUploadOriginal_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__driverUploadOriginal_name, __cb);
        try
        {
            __result.prepare(__driverUploadOriginal_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(userid);
            __os.writeInt(enterpriseid);
            __os.writeLong(orderid);
            __os.writeString(json);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_driverUploadOriginal(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __driverUploadOriginal_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __driverUploadOriginal_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_driverUploadOriginal(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getUploadPath_name = "getUploadPath";

    public String getUploadPath(String compid, String orderno)
    {
        return getUploadPath(compid, orderno, null, false);
    }

    public String getUploadPath(String compid, String orderno, java.util.Map<String, String> __ctx)
    {
        return getUploadPath(compid, orderno, __ctx, true);
    }

    private String getUploadPath(String compid, String orderno, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getUploadPath_name);
        return end_getUploadPath(begin_getUploadPath(compid, orderno, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, String orderno)
    {
        return begin_getUploadPath(compid, orderno, null, false, false, null);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, String orderno, java.util.Map<String, String> __ctx)
    {
        return begin_getUploadPath(compid, orderno, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, String orderno, Ice.Callback __cb)
    {
        return begin_getUploadPath(compid, orderno, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, String orderno, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUploadPath(compid, orderno, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, String orderno, Callback_DriverService_getUploadPath __cb)
    {
        return begin_getUploadPath(compid, orderno, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, String orderno, java.util.Map<String, String> __ctx, Callback_DriverService_getUploadPath __cb)
    {
        return begin_getUploadPath(compid, orderno, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, 
                                               String orderno, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getUploadPath(compid, orderno, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, 
                                               String orderno, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getUploadPath(compid, orderno, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, 
                                               String orderno, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getUploadPath(compid, orderno, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getUploadPath(String compid, 
                                               String orderno, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getUploadPath(compid, orderno, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getUploadPath(String compid, 
                                                String orderno, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getUploadPath(compid, orderno, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               DriverServicePrxHelper.__getUploadPath_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getUploadPath(String compid, 
                                                String orderno, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUploadPath_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getUploadPath_name, __cb);
        try
        {
            __result.prepare(__getUploadPath_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(compid);
            __os.writeString(orderno);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getUploadPath(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getUploadPath_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getUploadPath_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.hsf.framework.api.driver.DriverServicePrx __proxy = (com.hsf.framework.api.driver.DriverServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getUploadPath(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DriverServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), DriverServicePrx.class, DriverServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DriverServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), DriverServicePrx.class, DriverServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DriverServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), DriverServicePrx.class, DriverServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DriverServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), DriverServicePrx.class, DriverServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static DriverServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, DriverServicePrx.class, DriverServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static DriverServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, DriverServicePrx.class, DriverServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::driver::DriverService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, DriverServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static DriverServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DriverServicePrxHelper result = new DriverServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
