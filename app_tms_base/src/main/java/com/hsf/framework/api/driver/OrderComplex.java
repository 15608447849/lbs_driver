// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `driver.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.hsf.framework.api.driver;

/**
 * 订单数据详细模型
 **/
public class OrderComplex implements java.lang.Cloneable, java.io.Serializable
{
    public boolean isValid;

    public String freightNo;

    public String sAdd;

    public String dAdd;

    public String cargoInfo;

    public String carInfo;

    public String feeInfo;

    public String pickTime;

    public String contactInfo;

    public String takeInfo;

    public String arrivalTime;

    public String payType;

    public String payFee;

    public String sendTime;

    public String robTime;

    public String claimTime;

    public String signTime;

    public String claimCode;

    public boolean isOnline;

    public boolean isPay;

    public double fee;

    public OrderComplex()
    {
        freightNo = "";
        sAdd = "";
        dAdd = "";
        cargoInfo = "";
        carInfo = "";
        feeInfo = "";
        pickTime = "";
        contactInfo = "";
        takeInfo = "";
        arrivalTime = "";
        payType = "";
        payFee = "";
        sendTime = "";
        robTime = "";
        claimTime = "";
        signTime = "";
        claimCode = "";
    }

    public OrderComplex(boolean isValid, String freightNo, String sAdd, String dAdd, String cargoInfo, String carInfo, String feeInfo, String pickTime, String contactInfo, String takeInfo, String arrivalTime, String payType, String payFee, String sendTime, String robTime, String claimTime, String signTime, String claimCode, boolean isOnline, boolean isPay, double fee)
    {
        this.isValid = isValid;
        this.freightNo = freightNo;
        this.sAdd = sAdd;
        this.dAdd = dAdd;
        this.cargoInfo = cargoInfo;
        this.carInfo = carInfo;
        this.feeInfo = feeInfo;
        this.pickTime = pickTime;
        this.contactInfo = contactInfo;
        this.takeInfo = takeInfo;
        this.arrivalTime = arrivalTime;
        this.payType = payType;
        this.payFee = payFee;
        this.sendTime = sendTime;
        this.robTime = robTime;
        this.claimTime = claimTime;
        this.signTime = signTime;
        this.claimCode = claimCode;
        this.isOnline = isOnline;
        this.isPay = isPay;
        this.fee = fee;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        OrderComplex _r = null;
        if(rhs instanceof OrderComplex)
        {
            _r = (OrderComplex)rhs;
        }

        if(_r != null)
        {
            if(isValid != _r.isValid)
            {
                return false;
            }
            if(freightNo != _r.freightNo)
            {
                if(freightNo == null || _r.freightNo == null || !freightNo.equals(_r.freightNo))
                {
                    return false;
                }
            }
            if(sAdd != _r.sAdd)
            {
                if(sAdd == null || _r.sAdd == null || !sAdd.equals(_r.sAdd))
                {
                    return false;
                }
            }
            if(dAdd != _r.dAdd)
            {
                if(dAdd == null || _r.dAdd == null || !dAdd.equals(_r.dAdd))
                {
                    return false;
                }
            }
            if(cargoInfo != _r.cargoInfo)
            {
                if(cargoInfo == null || _r.cargoInfo == null || !cargoInfo.equals(_r.cargoInfo))
                {
                    return false;
                }
            }
            if(carInfo != _r.carInfo)
            {
                if(carInfo == null || _r.carInfo == null || !carInfo.equals(_r.carInfo))
                {
                    return false;
                }
            }
            if(feeInfo != _r.feeInfo)
            {
                if(feeInfo == null || _r.feeInfo == null || !feeInfo.equals(_r.feeInfo))
                {
                    return false;
                }
            }
            if(pickTime != _r.pickTime)
            {
                if(pickTime == null || _r.pickTime == null || !pickTime.equals(_r.pickTime))
                {
                    return false;
                }
            }
            if(contactInfo != _r.contactInfo)
            {
                if(contactInfo == null || _r.contactInfo == null || !contactInfo.equals(_r.contactInfo))
                {
                    return false;
                }
            }
            if(takeInfo != _r.takeInfo)
            {
                if(takeInfo == null || _r.takeInfo == null || !takeInfo.equals(_r.takeInfo))
                {
                    return false;
                }
            }
            if(arrivalTime != _r.arrivalTime)
            {
                if(arrivalTime == null || _r.arrivalTime == null || !arrivalTime.equals(_r.arrivalTime))
                {
                    return false;
                }
            }
            if(payType != _r.payType)
            {
                if(payType == null || _r.payType == null || !payType.equals(_r.payType))
                {
                    return false;
                }
            }
            if(payFee != _r.payFee)
            {
                if(payFee == null || _r.payFee == null || !payFee.equals(_r.payFee))
                {
                    return false;
                }
            }
            if(sendTime != _r.sendTime)
            {
                if(sendTime == null || _r.sendTime == null || !sendTime.equals(_r.sendTime))
                {
                    return false;
                }
            }
            if(robTime != _r.robTime)
            {
                if(robTime == null || _r.robTime == null || !robTime.equals(_r.robTime))
                {
                    return false;
                }
            }
            if(claimTime != _r.claimTime)
            {
                if(claimTime == null || _r.claimTime == null || !claimTime.equals(_r.claimTime))
                {
                    return false;
                }
            }
            if(signTime != _r.signTime)
            {
                if(signTime == null || _r.signTime == null || !signTime.equals(_r.signTime))
                {
                    return false;
                }
            }
            if(claimCode != _r.claimCode)
            {
                if(claimCode == null || _r.claimCode == null || !claimCode.equals(_r.claimCode))
                {
                    return false;
                }
            }
            if(isOnline != _r.isOnline)
            {
                return false;
            }
            if(isPay != _r.isPay)
            {
                return false;
            }
            if(fee != _r.fee)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::driver::OrderComplex");
        __h = IceInternal.HashUtil.hashAdd(__h, isValid);
        __h = IceInternal.HashUtil.hashAdd(__h, freightNo);
        __h = IceInternal.HashUtil.hashAdd(__h, sAdd);
        __h = IceInternal.HashUtil.hashAdd(__h, dAdd);
        __h = IceInternal.HashUtil.hashAdd(__h, cargoInfo);
        __h = IceInternal.HashUtil.hashAdd(__h, carInfo);
        __h = IceInternal.HashUtil.hashAdd(__h, feeInfo);
        __h = IceInternal.HashUtil.hashAdd(__h, pickTime);
        __h = IceInternal.HashUtil.hashAdd(__h, contactInfo);
        __h = IceInternal.HashUtil.hashAdd(__h, takeInfo);
        __h = IceInternal.HashUtil.hashAdd(__h, arrivalTime);
        __h = IceInternal.HashUtil.hashAdd(__h, payType);
        __h = IceInternal.HashUtil.hashAdd(__h, payFee);
        __h = IceInternal.HashUtil.hashAdd(__h, sendTime);
        __h = IceInternal.HashUtil.hashAdd(__h, robTime);
        __h = IceInternal.HashUtil.hashAdd(__h, claimTime);
        __h = IceInternal.HashUtil.hashAdd(__h, signTime);
        __h = IceInternal.HashUtil.hashAdd(__h, claimCode);
        __h = IceInternal.HashUtil.hashAdd(__h, isOnline);
        __h = IceInternal.HashUtil.hashAdd(__h, isPay);
        __h = IceInternal.HashUtil.hashAdd(__h, fee);
        return __h;
    }

    public OrderComplex
    clone()
    {
        OrderComplex c = null;
        try
        {
            c = (OrderComplex)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeBool(isValid);
        __os.writeString(freightNo);
        __os.writeString(sAdd);
        __os.writeString(dAdd);
        __os.writeString(cargoInfo);
        __os.writeString(carInfo);
        __os.writeString(feeInfo);
        __os.writeString(pickTime);
        __os.writeString(contactInfo);
        __os.writeString(takeInfo);
        __os.writeString(arrivalTime);
        __os.writeString(payType);
        __os.writeString(payFee);
        __os.writeString(sendTime);
        __os.writeString(robTime);
        __os.writeString(claimTime);
        __os.writeString(signTime);
        __os.writeString(claimCode);
        __os.writeBool(isOnline);
        __os.writeBool(isPay);
        __os.writeDouble(fee);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        isValid = __is.readBool();
        freightNo = __is.readString();
        sAdd = __is.readString();
        dAdd = __is.readString();
        cargoInfo = __is.readString();
        carInfo = __is.readString();
        feeInfo = __is.readString();
        pickTime = __is.readString();
        contactInfo = __is.readString();
        takeInfo = __is.readString();
        arrivalTime = __is.readString();
        payType = __is.readString();
        payFee = __is.readString();
        sendTime = __is.readString();
        robTime = __is.readString();
        claimTime = __is.readString();
        signTime = __is.readString();
        claimCode = __is.readString();
        isOnline = __is.readBool();
        isPay = __is.readBool();
        fee = __is.readDouble();
    }

    static public void
    __write(IceInternal.BasicStream __os, OrderComplex __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public OrderComplex
    __read(IceInternal.BasicStream __is, OrderComplex __v)
    {
        if(__v == null)
        {
             __v = new OrderComplex();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final OrderComplex __nullMarshalValue = new OrderComplex();

    public static final long serialVersionUID = 67156926L;
}
