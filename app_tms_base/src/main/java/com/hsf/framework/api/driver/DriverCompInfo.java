// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `driver.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.hsf.framework.api.driver;

/**
 * 企业与路线模型
 **/
public class DriverCompInfo implements java.lang.Cloneable, java.io.Serializable
{
    public int compid;

    public String fname;

    public String sname;

    public int ctype;

    public int csale;

    public long contact;

    public String phone;

    public String address;

    public String postcode;

    public DriverCompInfo()
    {
        fname = "";
        sname = "";
        phone = "";
        address = "";
        postcode = "";
    }

    public DriverCompInfo(int compid, String fname, String sname, int ctype, int csale, long contact, String phone, String address, String postcode)
    {
        this.compid = compid;
        this.fname = fname;
        this.sname = sname;
        this.ctype = ctype;
        this.csale = csale;
        this.contact = contact;
        this.phone = phone;
        this.address = address;
        this.postcode = postcode;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DriverCompInfo _r = null;
        if(rhs instanceof DriverCompInfo)
        {
            _r = (DriverCompInfo)rhs;
        }

        if(_r != null)
        {
            if(compid != _r.compid)
            {
                return false;
            }
            if(fname != _r.fname)
            {
                if(fname == null || _r.fname == null || !fname.equals(_r.fname))
                {
                    return false;
                }
            }
            if(sname != _r.sname)
            {
                if(sname == null || _r.sname == null || !sname.equals(_r.sname))
                {
                    return false;
                }
            }
            if(ctype != _r.ctype)
            {
                return false;
            }
            if(csale != _r.csale)
            {
                return false;
            }
            if(contact != _r.contact)
            {
                return false;
            }
            if(phone != _r.phone)
            {
                if(phone == null || _r.phone == null || !phone.equals(_r.phone))
                {
                    return false;
                }
            }
            if(address != _r.address)
            {
                if(address == null || _r.address == null || !address.equals(_r.address))
                {
                    return false;
                }
            }
            if(postcode != _r.postcode)
            {
                if(postcode == null || _r.postcode == null || !postcode.equals(_r.postcode))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::driver::DriverCompInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, compid);
        __h = IceInternal.HashUtil.hashAdd(__h, fname);
        __h = IceInternal.HashUtil.hashAdd(__h, sname);
        __h = IceInternal.HashUtil.hashAdd(__h, ctype);
        __h = IceInternal.HashUtil.hashAdd(__h, csale);
        __h = IceInternal.HashUtil.hashAdd(__h, contact);
        __h = IceInternal.HashUtil.hashAdd(__h, phone);
        __h = IceInternal.HashUtil.hashAdd(__h, address);
        __h = IceInternal.HashUtil.hashAdd(__h, postcode);
        return __h;
    }

    public DriverCompInfo
    clone()
    {
        DriverCompInfo c = null;
        try
        {
            c = (DriverCompInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(compid);
        __os.writeString(fname);
        __os.writeString(sname);
        __os.writeInt(ctype);
        __os.writeInt(csale);
        __os.writeLong(contact);
        __os.writeString(phone);
        __os.writeString(address);
        __os.writeString(postcode);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        compid = __is.readInt();
        fname = __is.readString();
        sname = __is.readString();
        ctype = __is.readInt();
        csale = __is.readInt();
        contact = __is.readLong();
        phone = __is.readString();
        address = __is.readString();
        postcode = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, DriverCompInfo __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public DriverCompInfo
    __read(IceInternal.BasicStream __is, DriverCompInfo __v)
    {
        if(__v == null)
        {
             __v = new DriverCompInfo();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final DriverCompInfo __nullMarshalValue = new DriverCompInfo();

    public static final long serialVersionUID = 1643452806L;
}
