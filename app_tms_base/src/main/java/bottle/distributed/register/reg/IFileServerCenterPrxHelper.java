// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `file_service_reg.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bottle.distributed.register.reg;

/**
 * Provides type-specific helper functions.
 **/
public final class IFileServerCenterPrxHelper extends Ice.ObjectPrxHelperBase implements IFileServerCenterPrx
{
    private static final String __dynamicRegistrationFileServerInfo_name = "dynamicRegistrationFileServerInfo";

    public boolean dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered)
    {
        return dynamicRegistrationFileServerInfo(list, isCovered, null, false);
    }

    public boolean dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered, java.util.Map<String, String> __ctx)
    {
        return dynamicRegistrationFileServerInfo(list, isCovered, __ctx, true);
    }

    private boolean dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__dynamicRegistrationFileServerInfo_name);
        return end_dynamicRegistrationFileServerInfo(begin_dynamicRegistrationFileServerInfo(list, isCovered, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, null, false, false, null);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered, java.util.Map<String, String> __ctx)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered, Ice.Callback __cb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered, Callback_IFileServerCenter_dynamicRegistrationFileServerInfo __cb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, boolean isCovered, java.util.Map<String, String> __ctx, Callback_IFileServerCenter_dynamicRegistrationFileServerInfo __cb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, 
                                                                   boolean isCovered, 
                                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, 
                                                                   boolean isCovered, 
                                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, 
                                                                   boolean isCovered, 
                                                                   java.util.Map<String, String> __ctx, 
                                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, 
                                                                   boolean isCovered, 
                                                                   java.util.Map<String, String> __ctx, 
                                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, 
                                                                    boolean isCovered, 
                                                                    java.util.Map<String, String> __ctx, 
                                                                    boolean __explicitCtx, 
                                                                    boolean __synchronous, 
                                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dynamicRegistrationFileServerInfo(list, isCovered, __ctx, __explicitCtx, __synchronous, 
                                                       new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                                           {
                                                               public final void __completed(Ice.AsyncResult __result)
                                                               {
                                                                   IFileServerCenterPrxHelper.__dynamicRegistrationFileServerInfo_completed(this, __result);
                                                               }
                                                           });
    }

    private Ice.AsyncResult begin_dynamicRegistrationFileServerInfo(FSAddressConfig[] list, 
                                                                    boolean isCovered, 
                                                                    java.util.Map<String, String> __ctx, 
                                                                    boolean __explicitCtx, 
                                                                    boolean __synchronous, 
                                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dynamicRegistrationFileServerInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__dynamicRegistrationFileServerInfo_name, __cb);
        try
        {
            __result.prepare(__dynamicRegistrationFileServerInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            FSAddressConfigListHelper.write(__os, list);
            __os.writeBool(isCovered);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_dynamicRegistrationFileServerInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __dynamicRegistrationFileServerInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __dynamicRegistrationFileServerInfo_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        bottle.distributed.register.reg.IFileServerCenterPrx __proxy = (bottle.distributed.register.reg.IFileServerCenterPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_dynamicRegistrationFileServerInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __dynamicRemoveFileServerInfo_name = "dynamicRemoveFileServerInfo";

    public boolean dynamicRemoveFileServerInfo(FSAddressConfig[] list)
    {
        return dynamicRemoveFileServerInfo(list, null, false);
    }

    public boolean dynamicRemoveFileServerInfo(FSAddressConfig[] list, java.util.Map<String, String> __ctx)
    {
        return dynamicRemoveFileServerInfo(list, __ctx, true);
    }

    private boolean dynamicRemoveFileServerInfo(FSAddressConfig[] list, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__dynamicRemoveFileServerInfo_name);
        return end_dynamicRemoveFileServerInfo(begin_dynamicRemoveFileServerInfo(list, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list)
    {
        return begin_dynamicRemoveFileServerInfo(list, null, false, false, null);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, java.util.Map<String, String> __ctx)
    {
        return begin_dynamicRemoveFileServerInfo(list, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, Ice.Callback __cb)
    {
        return begin_dynamicRemoveFileServerInfo(list, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dynamicRemoveFileServerInfo(list, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, Callback_IFileServerCenter_dynamicRemoveFileServerInfo __cb)
    {
        return begin_dynamicRemoveFileServerInfo(list, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, java.util.Map<String, String> __ctx, Callback_IFileServerCenter_dynamicRemoveFileServerInfo __cb)
    {
        return begin_dynamicRemoveFileServerInfo(list, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, 
                                                             IceInternal.Functional_BoolCallback __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dynamicRemoveFileServerInfo(list, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, 
                                                             IceInternal.Functional_BoolCallback __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dynamicRemoveFileServerInfo(list, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, 
                                                             java.util.Map<String, String> __ctx, 
                                                             IceInternal.Functional_BoolCallback __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dynamicRemoveFileServerInfo(list, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, 
                                                             java.util.Map<String, String> __ctx, 
                                                             IceInternal.Functional_BoolCallback __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dynamicRemoveFileServerInfo(list, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, 
                                                              java.util.Map<String, String> __ctx, 
                                                              boolean __explicitCtx, 
                                                              boolean __synchronous, 
                                                              IceInternal.Functional_BoolCallback __responseCb, 
                                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dynamicRemoveFileServerInfo(list, __ctx, __explicitCtx, __synchronous, 
                                                 new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                                     {
                                                         public final void __completed(Ice.AsyncResult __result)
                                                         {
                                                             IFileServerCenterPrxHelper.__dynamicRemoveFileServerInfo_completed(this, __result);
                                                         }
                                                     });
    }

    private Ice.AsyncResult begin_dynamicRemoveFileServerInfo(FSAddressConfig[] list, 
                                                              java.util.Map<String, String> __ctx, 
                                                              boolean __explicitCtx, 
                                                              boolean __synchronous, 
                                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dynamicRemoveFileServerInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__dynamicRemoveFileServerInfo_name, __cb);
        try
        {
            __result.prepare(__dynamicRemoveFileServerInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            FSAddressConfigListHelper.write(__os, list);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_dynamicRemoveFileServerInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __dynamicRemoveFileServerInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __dynamicRemoveFileServerInfo_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        bottle.distributed.register.reg.IFileServerCenterPrx __proxy = (bottle.distributed.register.reg.IFileServerCenterPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_dynamicRemoveFileServerInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryFileServerAddress_name = "queryFileServerAddress";

    public FSAddressInfo queryFileServerAddress()
    {
        return queryFileServerAddress(null, false);
    }

    public FSAddressInfo queryFileServerAddress(java.util.Map<String, String> __ctx)
    {
        return queryFileServerAddress(__ctx, true);
    }

    private FSAddressInfo queryFileServerAddress(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryFileServerAddress_name);
        return end_queryFileServerAddress(begin_queryFileServerAddress(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryFileServerAddress()
    {
        return begin_queryFileServerAddress(null, false, false, null);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(java.util.Map<String, String> __ctx)
    {
        return begin_queryFileServerAddress(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(Ice.Callback __cb)
    {
        return begin_queryFileServerAddress(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryFileServerAddress(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(Callback_IFileServerCenter_queryFileServerAddress __cb)
    {
        return begin_queryFileServerAddress(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(java.util.Map<String, String> __ctx, Callback_IFileServerCenter_queryFileServerAddress __cb)
    {
        return begin_queryFileServerAddress(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(IceInternal.Functional_GenericCallback1<FSAddressInfo> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryFileServerAddress(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(IceInternal.Functional_GenericCallback1<FSAddressInfo> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryFileServerAddress(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<FSAddressInfo> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryFileServerAddress(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryFileServerAddress(java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<FSAddressInfo> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryFileServerAddress(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryFileServerAddress(java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_GenericCallback1<FSAddressInfo> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryFileServerAddress(__ctx, __explicitCtx, __synchronous, 
                                            new IceInternal.Functional_TwowayCallbackArg1<bottle.distributed.register.reg.FSAddressInfo>(__responseCb, __exceptionCb, __sentCb)
                                                {
                                                    public final void __completed(Ice.AsyncResult __result)
                                                    {
                                                        IFileServerCenterPrxHelper.__queryFileServerAddress_completed(this, __result);
                                                    }
                                                });
    }

    private Ice.AsyncResult begin_queryFileServerAddress(java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryFileServerAddress_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryFileServerAddress_name, __cb);
        try
        {
            __result.prepare(__queryFileServerAddress_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FSAddressInfo end_queryFileServerAddress(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryFileServerAddress_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FSAddressInfo __ret = null;
            __ret = FSAddressInfo.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryFileServerAddress_completed(Ice.TwowayCallbackArg1<FSAddressInfo> __cb, Ice.AsyncResult __result)
    {
        bottle.distributed.register.reg.IFileServerCenterPrx __proxy = (bottle.distributed.register.reg.IFileServerCenterPrx)__result.getProxy();
        FSAddressInfo __ret = null;
        try
        {
            __ret = __proxy.end_queryFileServerAddress(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IFileServerCenterPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), IFileServerCenterPrx.class, IFileServerCenterPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IFileServerCenterPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), IFileServerCenterPrx.class, IFileServerCenterPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IFileServerCenterPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), IFileServerCenterPrx.class, IFileServerCenterPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IFileServerCenterPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), IFileServerCenterPrx.class, IFileServerCenterPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static IFileServerCenterPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, IFileServerCenterPrx.class, IFileServerCenterPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static IFileServerCenterPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, IFileServerCenterPrx.class, IFileServerCenterPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::reg::IFileServerCenter"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, IFileServerCenterPrx v)
    {
        __os.writeProxy(v);
    }

    public static IFileServerCenterPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            IFileServerCenterPrxHelper result = new IFileServerCenterPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
